from flask import Flask, request, jsonify
import os
import datetime
import requests
import psycopg2

app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Supabase) ===
# –ß–∏—Ç–∞–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥
DB_URL = os.getenv(
    "DATABASE_URL",
    "postgresql://postgres:Asd987321aw@aws-0-eu-central-1.pooler.supabase.com:6543/postgres"
)
conn = psycopg2.connect(DB_URL)
conn.autocommit = True
cursor = conn.cursor()()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wazzup ===
API_BEARER_TOKEN = '92a8247c0ce7472a86a5c36f71327d19'
CHANNEL_ID        = 'c1808feb-0822-4203-a6dc-e2a07c705751'
ADMIN_CHAT_ID     = '77778053727'   # —Å—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
WAZZUP_SEND_API   = 'https://api.wazzup24.com/v3/message'

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24 ===
BITRIX_WEBHOOK_URL = 'https://b24-xq7bnn.bitrix24.kz/rest/1/tnjaxnh7k6xwbyyq/crm.lead.add.json'

# === –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ===
CITIES = {
    '1': '–ê–ª–º–∞—Ç—ã', '2': '–ù—É—Ä-–°—É–ª—Ç–∞–Ω', '3': '–®—ã–º–∫–µ–Ω—Ç',
    '4': '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '5': '–ê–∫—Ç–æ–±–µ', '6': '–ê—Å—Ç–∞–Ω–∞'
}
DIRECTIONS = {
    '1': '–ö–∏—Ä–ø–∏—á –∏ –±–ª–æ–∫–∏', '2': '–¶–µ–º–µ–Ω—Ç –∏ —Ä–∞—Å—Ç–≤–æ—Ä—ã', '3': '–ê—Ä–º–∞—Ç—É—Ä–∞ –∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç',
    '4': '–î—Ä–µ–≤–µ—Å–∏–Ω–∞ –∏ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã', '5': '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '6': '–ò–∑–æ–ª—è—Ü–∏—è –∏ —É—Ç–µ–ø–ª–∏—Ç–µ–ª–∏',
    '7': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '8': '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '9': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    '10': '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
}
RESPONSIBLES = {
    '–ê–ª–º–∞—Ç—ã': {'id': 2}, '–ù—É—Ä-–°—É–ª—Ç–∞–Ω': {'id': 3}, '–®—ã–º–∫–µ–Ω—Ç': {'id': 4},
    '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞': {'id': 11}, '–ê–∫—Ç–æ–±–µ': {'id': 5}, '–ê—Å—Ç–∞–Ω–∞': {'id': 1}
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π users

def save_or_update_user(chat_id, fio):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    now = datetime.datetime.utcnow()
    cursor.execute(
        """
        INSERT INTO users (chat_id, fio, last_interaction)
        VALUES (%s, %s, %s)
        ON CONFLICT (chat_id) DO UPDATE
          SET last_interaction = EXCLUDED.last_interaction
        """,
        (chat_id, fio, now)
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

def log(msg):
    ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"{ts} - {msg}")

def send_message(chat_id: str, text: str) -> bool:
    headers = {
        'Authorization': f'Bearer {API_BEARER_TOKEN}',
        'Content-Type':  'application/json'
    }
    payload = {"channelId": CHANNEL_ID, "chatType": "whatsapp", "chatId": chat_id, "text": text}
    try:
        r = requests.post(WAZZUP_SEND_API, json=payload, headers=headers, timeout=30)
        log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Wazzup ({chat_id}): {r.status_code}")
        return r.status_code in (200, 201)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Wazzup ({chat_id}): {e}")
        return False

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞

def notify_admin(fio, phone, city, event_type):
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    text = (
        f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* –≤ Bitrix24\n"
        f"‚è∞ –í—Ä–µ–º—è: {now}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {fio} ({phone})\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
        f"üéØ –¶–µ–ª—å: {event_type}\n"
        f"‚úÖ –õ–∏–¥ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ CRM."
    )
    send_message(ADMIN_CHAT_ID, text)

def create_bitrix_lead(city, event_type, fio, phone, chat_id):
    parts = fio.split(' ')
    last, first, second = (parts + ["", "", ""])[:3]
    assigned = RESPONSIBLES.get(city, {'id':1})['id']
    comment = (
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: WhatsApp Bot\n"
        f"–°–æ–±—ã—Ç–∏–µ: {event_type}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {fio}"
    )
    data = {"fields":{
        "TITLE": f"Optimus KZ: {event_type} ({city})",
        "NAME": first, "LAST_NAME": last, "SECOND_NAME": second,
        "ASSIGNED_BY_ID": assigned, "ADDRESS_CITY": city,
        "COMMENTS": comment,
        "PHONE":[{"VALUE": phone, "VALUE_TYPE":"WORK"}]
    }, "params":{"REGISTER_SONET_EVENT":"Y"}}
    try:
        r = requests.post(BITRIX_WEBHOOK_URL, json=data, timeout=30)
        log(f"Bitrix lead: {r.status_code} / {r.text}")
        if r.status_code==200 and r.json().get('result'):
            notify_admin(fio, phone, city, event_type)
    except Exception as e:
        log(f"Bitrix API error: {e}")

# –ú–µ–Ω—é

def get_menu_text():
    return "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Optimus KZ*! üëã\n" + \
           "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:\n" + \
           "\n".join(f"{k}. {v}" for k,v in CITIES.items())

def get_continue_menu():
    return "1Ô∏è‚É£ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã\n2Ô∏è‚É£ –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫"

def get_directions_menu():
    return "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n" + \
           "\n".join(f"{k}. {v}" for k,v in DIRECTIONS.items())

@app.route('/webhook', methods=['POST','GET'])
def webhook():
    if request.method=='GET':
        return jsonify({'status':'ready'}),200

    data = request.get_json(force=True)
    log(f"Incoming: {data}")

    for msg in data.get('messages',[]):
        mid     = msg.get('messageId')
        chat_id = msg.get('chatId')
        text    = msg.get('text','').strip()
        fio     = msg.get('contact',{}).get('name','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        is_me   = msg.get('fromMe',False)
        is_echo = msg.get('isEcho',False)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_or_update_user(chat_id, fio)

        # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ —ç—Ö–æ
        if is_me or is_echo or not text or mid in processed_message_ids:
            processed_message_ids.add(mid)
            continue
        processed_message_ids.add(mid)

        state = user_states.get(chat_id, {'step':'city'})

        if state['step']=='city':
            if text in CITIES:
                city = CITIES[text]
                user_states[chat_id] = {'step':'menu','city':city}
                send_message(chat_id, get_continue_menu())
            else:
                send_message(chat_id, get_menu_text())

        elif state['step']=='menu':
            city = state['city']
            if text=='1':
                user_states[chat_id]['step']='direction'
                send_message(chat_id, get_directions_menu())
            elif text=='2':
                send_message(chat_id,
                    "üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–æ–∫ –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.")
                create_bitrix_lead(city,'Callback',fio,chat_id,chat_id)
                user_states.pop(chat_id,None)
            else:
                send_message(chat_id, get_continue_menu())

        elif state['step']=='direction':
            city = state['city']
            if text in DIRECTIONS:
                direction = DIRECTIONS[text]
                send_message(chat_id,
                    f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: {direction} –≤ {city}. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è.")
                create_bitrix_lead(city,f"Direction: {direction}",fio,chat_id,chat_id)
                user_states.pop(chat_id,None)
            else:
                send_message(chat_id, get_directions_menu())

        else:
            user_states.pop(chat_id,None)
            send_message(chat_id, get_menu_text())

    return jsonify({'status':'ok'}),200

if __name__=='__main__':
    log("Server started, awaiting webhook...")
    app.run(host='0.0.0.0',port=10000)
