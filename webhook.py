from flask import Flask, request, jsonify
import datetime
import requests

app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wazzup ===
API_BEARER_TOKEN = '92a8247c0ce7472a86a5c36f71327d19'
CHANNEL_ID        = 'c1808feb-0822-4203-a6dc-e2a07c705751'
ALLOWED_CHAT_ID   = '77766961328'
ADMIN_CHAT_ID     = '77778053727'   # —Å—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
WAZZUP_SEND_API   = 'https://api.wazzup24.com/v3/message'

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24 ===
BITRIX_WEBHOOK_URL = 'https://b24-xq7bnn.bitrix24.kz/rest/1/tnjaxnh7k6xwbyyq/crm.lead.add.json'

# === –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ===
CITIES = {
    '1': '–ê–ª–º–∞—Ç—ã',
    '2': '–ù—É—Ä-–°—É–ª—Ç–∞–Ω',
    '3': '–®—ã–º–∫–µ–Ω—Ç',
    '4': '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞',
    '5': '–ê–∫—Ç–æ–±–µ',
    '6': '–ê—Å—Ç–∞–Ω–∞'
}

DIRECTIONS = {
    '1': '–ö–∏—Ä–ø–∏—á –∏ –±–ª–æ–∫–∏',
    '2': '–¶–µ–º–µ–Ω—Ç –∏ —Ä–∞—Å—Ç–≤–æ—Ä—ã',
    '3': '–ê—Ä–º–∞—Ç—É—Ä–∞ –∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç',
    '4': '–î—Ä–µ–≤–µ—Å–∏–Ω–∞ –∏ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '5': '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '6': '–ò–∑–æ–ª—è—Ü–∏—è –∏ —É—Ç–µ–ø–ª–∏—Ç–µ–ª–∏',
    '7': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
    '8': '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    '9': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    '10': '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
}

# === –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞ –≥–æ—Ä–æ–¥–∞ ===
RESPONSIBLES = {
    '–ê–ª–º–∞—Ç—ã':     {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–ª–º–∞—Ç—ã',     'phone': '+7xxx', 'id': 2},
    '–ù—É—Ä-–°—É–ª—Ç–∞–Ω': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ù—É—Ä-–°—É–ª—Ç–∞–Ω–∞','phone': '+7xxx', 'id': 3},
    '–®—ã–º–∫–µ–Ω—Ç':    {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –®—ã–º–∫–µ–Ω—Ç–∞',   'phone': '+7xxx', 'id': 4},
    '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞':  {'name': '–ö–∏—Ä–∏–ª–ª –ö–æ—Å—Ç—ã–ª–µ–≤',     'phone': '+77766961328', 'id': 11},
    '–ê–∫—Ç–æ–±–µ':     {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–∫—Ç–æ–±–µ',     'phone': '+7xxx', 'id': 5},
    '–ê—Å—Ç–∞–Ω–∞':     {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê—Å—Ç–∞–Ω—ã',     'phone': '+77001234567', 'id': 1},
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID
user_states = {}
processed_message_ids = set()

def log(msg):
    ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"{ts} - {msg}")

def send_message(chat_id: str, text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Wazzup"""
    headers = {
        'Authorization': f'Bearer {API_BEARER_TOKEN}',
        'Content-Type':  'application/json'
    }
    payload = {
        "channelId": CHANNEL_ID,
        "chatType":  "whatsapp",
        "chatId":    chat_id,
        "text":      text
    }
    try:
        r = requests.post(WAZZUP_SEND_API, json=payload, headers=headers, timeout=30)
        log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Wazzup ({chat_id}): {r.status_code}")
        return r.status_code in (200, 201)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Wazzup ({chat_id}): {e}")
        return False

def notify_admin(fio, phone, city, event_type):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ª–∏–¥e"""
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    text = (
        f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* –≤ Bitrix24\n"
        f"‚è∞ –í—Ä–µ–º—è: {now}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {fio} ({phone})\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
        f"üéØ –¶–µ–ª—å: {event_type}\n"
        f"‚úÖ –õ–∏–¥ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ CRM."
    )
    send_message(ADMIN_CHAT_ID, text)

def create_bitrix_lead(city, event_type, fio, phone, chat_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ Bitrix –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    parts = fio.split(' ')
    last, first, second = (parts + ["", "", ""])[:3]
    resp = RESPONSIBLES.get(city, {'id': 1})
    assigned_id = resp['id']

    comment = (
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: WhatsApp Bot\n"
        f"–°–æ–±—ã—Ç–∏–µ: {event_type}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç –≤ WhatsApp: {fio}"
    )
    data = {
        "fields": {
            "TITLE":          f"Optimus KZ Bot: {event_type} ({city})",
            "NAME":           first,
            "LAST_NAME":      last,
            "SECOND_NAME":    second,
            "ASSIGNED_BY_ID": assigned_id,
            "ADDRESS_CITY":   city,
            "COMMENTS":       comment,
            "PHONE": [
                {"VALUE": phone, "VALUE_TYPE": "WORK"}
            ],
        },
        "params": {"REGISTER_SONET_EVENT": "Y"}
    }
    try:
        resp = requests.post(BITRIX_WEBHOOK_URL, json=data, timeout=30)
        log(f"Bitrix lead: {resp.status_code} / {resp.text}")
        if resp.status_code == 200 and resp.json().get("result"):
            notify_admin(fio, phone, city, event_type)
        else:
            send_message(chat_id,
                "‚ö†Ô∏è –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ CRM –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. "
                "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    except Exception as e:
        log(f"Bitrix API error: {e}")
        send_message(chat_id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å CRM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_menu_text():
    return (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Optimus KZ*! üëã\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å "
        "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n" +
        "\n".join(f"{k}. {v}" for k, v in CITIES.items())
    )

def get_continue_menu():
    return (
        "–°–ø–∞—Å–∏–±–æ! –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?\n"
        "1Ô∏è‚É£ ‚Äî –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n"
        "2Ô∏è‚É£ ‚Äî –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
    )

def get_directions_menu():
    return (
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∞:\n" +
        "\n".join(f"{k}. {v}" for k, v in DIRECTIONS.items()) +
        "\n\n(–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞)"
    )

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    if request.method == 'GET':
        return jsonify({'status': 'ready'}), 200

    data = request.get_json(force=True)
    log(f"Webhook received: {data}")

    for msg in data.get("messages", []):
        mid     = msg.get("messageId")
        chat_id = msg.get("chatId")
        text    = msg.get("text", "").strip()
        fio     = msg.get("contact", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        is_me   = msg.get("fromMe", False)
        is_echo = msg.get("isEcho", False)

        log(f"Msg {mid} from {chat_id}: ¬´{text}¬ª (echo={is_echo}, fromMe={is_me})")

        if is_me or is_echo or not text or mid in processed_message_ids or chat_id != ALLOWED_CHAT_ID:
            processed_message_ids.add(mid)
            continue

        processed_message_ids.add(mid)
        state = user_states.get(chat_id, {"step": "city"})

        # –®–∞–≥ 1: –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
        if state["step"] == "city":
            if text in CITIES:
                city = CITIES[text]
                user_states[chat_id] = {"step": "menu", "city": city}
                send_message(chat_id, get_continue_menu())
            else:
                send_message(chat_id, get_menu_text())

        # –®–∞–≥ 2: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif state["step"] == "menu":
            city = state["city"]
            if text == "1":
                user_states[chat_id]["step"] = "direction"
                send_message(chat_id, get_directions_menu())
            elif text == "2":
                send_message(chat_id,
                    "üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–æ–∫ –Ω–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ *Optimus KZ*!")
                create_bitrix_lead(city, "Callback", fio, chat_id, chat_id)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_continue_menu())

        # –®–∞–≥ 3: –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        elif state["step"] == "direction":
            city = state["city"]
            if text in DIRECTIONS:
                direction = DIRECTIONS[text]
                send_message(chat_id,
                    f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{direction}* –≤ –≥–æ—Ä–æ–¥–µ *{city}*.\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –≤–∞—Å –ø–æ–¥–±–æ—Ä–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è "
                    "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ *Optimus KZ*!")
                create_bitrix_lead(city, f"Direction: {direction}", fio, chat_id, chat_id)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_directions_menu())

        # –°–±—Ä–æ—Å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        else:
            user_states.pop(chat_id, None)
            send_message(chat_id, get_menu_text())

    return jsonify({'status': 'ok'}), 200

if __name__ == '__main__':
    log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º webhook‚Ä¶")
    app.run(host='0.0.0.0', port=10000)
