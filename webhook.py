from flask import Flask, request, jsonify
import os
import datetime
import requests
from sqlalchemy import create_engine, Column, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
API_BEARER_TOKEN  = os.getenv('API_BEARER_TOKEN')
CHANNEL_ID         = os.getenv('CHANNEL_ID')
ALLOWED_CHAT_ID    = os.getenv('ALLOWED_CHAT_ID')
ADMIN_CHAT_ID      = os.getenv('ADMIN_CHAT_ID')
WAZZUP_SEND_API    = os.getenv('WAZZUP_SEND_API')
DATABASE_URL       = os.getenv('DATABASE_URL')

# === SQLAlchemy setup ===
engine = create_engine(DATABASE_URL, pool_pre_ping=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class ChatRecord(Base):
    __tablename__ = 'chat_records'
    chat_id = Column(String, primary_key=True, index=True)
    user_phone = Column(String, nullable=True)
    last_bot_message = Column(DateTime, nullable=False)

# —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
Base.metadata.create_all(bind=engine)

app = Flask(__name__)

# === –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ===
CITIES = {
    '1': '–ê–ª–º–∞—Ç—ã', '2': '–ù—É—Ä-–°—É–ª—Ç–∞–Ω', '3': '–®—ã–º–∫–µ–Ω—Ç',
    '4': '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '5': '–ê–∫—Ç–æ–±–µ', '6': '–ê—Å—Ç–∞–Ω–∞'
}
DIRECTIONS = {
    '1': '–ö–∏—Ä–ø–∏—á –∏ –±–ª–æ–∫–∏', '2': '–¶–µ–º–µ–Ω—Ç –∏ —Ä–∞—Å—Ç–≤–æ—Ä—ã', '3': '–ê—Ä–º–∞—Ç—É—Ä–∞ –∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç',
    '4': '–î—Ä–µ–≤–µ—Å–∏–Ω–∞ –∏ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã', '5': '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '6': '–ò–∑–æ–ª—è—Ü–∏—è –∏ —É—Ç–µ–ø–ª–∏—Ç–µ–ª–∏', '7': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
    '8': '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '9': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '10': '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
}
RESPONSIBLES = {
    '–ê–ª–º–∞—Ç—ã': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–ª–º–∞—Ç—ã', 'phone': '+7xxx', 'id': 2},
    '–ù—É—Ä-–°—É–ª—Ç–∞–Ω': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ù—É—Ä-–°—É–ª—Ç–∞–Ω–∞', 'phone': '+7xxx', 'id': 3},
    '–®—ã–º–∫–µ–Ω—Ç': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –®—ã–º–∫–µ–Ω—Ç–∞', 'phone': '+7xxx', 'id': 4},
    '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞': {'name': '–ö–∏—Ä–∏–ª–ª –ö–æ—Å—Ç—ã–ª–µ–≤', 'phone': '+77766961328', 'id': 11},
    '–ê–∫—Ç–æ–±–µ': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–∫—Ç–æ–±–µ', 'phone': '+7xxx', 'id': 5},
    '–ê—Å—Ç–∞–Ω–∞': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê—Å—Ç–∞–Ω—ã', 'phone': '+77001234567', 'id': 1},
}

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î ===
def record_chat_event(chat_id: str, user_phone: str = None):
    session = SessionLocal()
    try:
        now = datetime.datetime.now()
        record = session.query(ChatRecord).get(chat_id)
        if record:
            record.last_bot_message = now
            if user_phone:
                record.user_phone = user_phone
        else:
            record = ChatRecord(
                chat_id=chat_id,
                user_phone=user_phone,
                last_bot_message=now
            )
            session.add(record)
        session.commit()
    finally:
        session.close()

# === –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ===

def log(msg):
    ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"{ts} - {msg}")


def send_message(chat_id: str, text: str) -> bool:
    headers = {
        'Authorization': f'Bearer {API_BEARER_TOKEN}',
        'Content-Type':  'application/json'
    }
    payload = {"channelId": CHANNEL_ID, "chatType": "whatsapp", "chatId": chat_id, "text": text}
    try:
        r = requests.post(WAZZUP_SEND_API, json=payload, headers=headers, timeout=30)
        log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Wazzup ({chat_id}): {r.status_code}")
        return r.status_code in (200, 201)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Wazzup ({chat_id}): {e}")
        return False

# —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é

def get_menu_text():
    return (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Optimus KZ*! üëã\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å "
        "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n" +
        "\n".join(f"{k}. {v}" for k, v in CITIES.items())
    )

def get_continue_menu():
    return (
        "–°–ø–∞—Å–∏–±–æ! –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?\n"
        "1Ô∏è‚É£ ‚Äî –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n"
        "2Ô∏è‚É£ ‚Äî –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
    )

def get_directions_menu():
    return (
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∞:\n" +
        "\n".join(f"{k}. {v}" for k, v in DIRECTIONS.items()) +
        "\n\n(–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞)"
    )

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    if request.method == 'GET':
        return jsonify({'status': 'ready'}), 200

    data = request.get_json(force=True)
    log(f"Webhook received: {data}")

    for msg in data.get("messages", []):
        mid     = msg.get("messageId")
        chat_id = msg.get("chatId")
        text    = msg.get("text", "").strip()
        fio     = msg.get("contact", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        is_me   = msg.get("fromMe", False)
        is_echo = msg.get("isEcho", False)

        log(f"Msg {mid} from {chat_id}: ¬´{text}¬ª (echo={is_echo}, fromMe={is_me})")

        # —Ñ–∏–ª—å—Ç—Ä—ã
        if is_me or is_echo or not text or chat_id != ALLOWED_CHAT_ID:
            continue

        state = user_states.get(chat_id, {"step": "city"})

        # –®–∞–≥ 1: –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
        if state["step"] == "city":
            if text in CITIES:
                city = CITIES[text]
                user_states[chat_id] = {"step": "menu", "city": city}
                if send_message(chat_id, get_continue_menu()):
                    # –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –º–µ–Ω—é –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    pass
            else:
                send_message(chat_id, get_menu_text())

        # –®–∞–≥ 2: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif state["step"] == "menu":
            city = state["city"]
            if text == "1":
                user_states[chat_id]["step"] = "direction"
                send_message(chat_id, get_directions_menu())
            elif text == "2":
                if send_message(chat_id,
                    "üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–æ–∫ –Ω–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ *Optimus KZ*!" ):
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "callback"
                    record_chat_event(chat_id, fio)
                create_bitrix_lead(city, "Callback", fio, chat_id, chat_id)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_continue_menu())

        # –®–∞–≥ 3: –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        elif state["step"] == "direction":
            city = state["city"]
            if text in DIRECTIONS:
                direction = DIRECTIONS[text]
                if send_message(chat_id,
                    f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{direction}* –≤ –≥–æ—Ä–æ–¥–µ *{city}*.\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –≤–∞—Å –ø–æ–¥–±–æ—Ä–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è "
                    "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ *Optimus KZ*!" ):
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "direction"
                    record_chat_event(chat_id, fio)
                create_bitrix_lead(city, f"Direction: {direction}", fio, chat_id, chat_id)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_directions_menu())

        # –°–±—Ä–æ—Å
        else:
            user_states.pop(chat_id, None)
            send_message(chat_id, get_menu_text())

    return jsonify({'status': 'ok'}), 200

if __name__ == '__main__':
    log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º webhook‚Ä¶")
    app.run(host='0.0.0.0', port=10000)
