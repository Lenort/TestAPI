from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import datetime
import requests
import os

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv("DATABASE_URL")
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wazzup –∏ Bitrix ===
API_BEARER_TOKEN = os.getenv("API_BEARER_TOKEN")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")
CHANNEL_ID = 'c1808feb-0822-4203-a6dc-e2a07c705751'
ALLOWED_CHAT_ID = '77766961328'
ADMIN_CHAT_ID = '77778053727'
WAZZUP_SEND_API = 'https://api.wazzup24.com/v3/message'

# === –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ===
CITIES = {
    '1': '–ê–ª–º–∞—Ç—ã', '2': '–ù—É—Ä-–°—É–ª—Ç–∞–Ω', '3': '–®—ã–º–∫–µ–Ω—Ç',
    '4': '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '5': '–ê–∫—Ç–æ–±–µ', '6': '–ê—Å—Ç–∞–Ω–∞'
}

DIRECTIONS = {
    '1': '–ö–∏—Ä–ø–∏—á –∏ –±–ª–æ–∫–∏', '2': '–¶–µ–º–µ–Ω—Ç –∏ —Ä–∞—Å—Ç–≤–æ—Ä—ã',
    '3': '–ê—Ä–º–∞—Ç—É—Ä–∞ –∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç', '4': '–î—Ä–µ–≤–µ—Å–∏–Ω–∞ –∏ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '5': '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '6': '–ò–∑–æ–ª—è—Ü–∏—è –∏ —É—Ç–µ–ø–ª–∏—Ç–µ–ª–∏',
    '7': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '8': '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    '9': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '10': '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
}

RESPONSIBLES = {
    '–ê–ª–º–∞—Ç—ã': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–ª–º–∞—Ç—ã', 'phone': '+7xxx', 'id': 2},
    '–ù—É—Ä-–°—É–ª—Ç–∞–Ω': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ù—É—Ä-–°—É–ª—Ç–∞–Ω–∞', 'phone': '+7xxx', 'id': 3},
    '–®—ã–º–∫–µ–Ω—Ç': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –®—ã–º–∫–µ–Ω—Ç–∞', 'phone': '+7xxx', 'id': 4},
    '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞': {'name': '–ö–∏—Ä–∏–ª–ª –ö–æ—Å—Ç—ã–ª–µ–≤', 'phone': '+77766961328', 'id': 11},
    '–ê–∫—Ç–æ–±–µ': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–∫—Ç–æ–±–µ', 'phone': '+7xxx', 'id': 5},
    '–ê—Å—Ç–∞–Ω–∞': {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê—Å—Ç–∞–Ω—ã', 'phone': '+77001234567', 'id': 1},
}

# === –ú–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
class Lead(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    chat_id = db.Column(db.String(50))
    fio = db.Column(db.String(100))
    phone = db.Column(db.String(30))
    city = db.Column(db.String(50))
    direction = db.Column(db.String(100))
    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
user_states = {}
processed_message_ids = set()

# === –£—Ç–∏–ª–∏—Ç—ã ===
def log(msg):
    print(f"{datetime.datetime.now():%Y-%m-%d %H:%M:%S} - {msg}")

def send_message(chat_id: str, text: str) -> bool:
    headers = {'Authorization': f'Bearer {API_BEARER_TOKEN}', 'Content-Type': 'application/json'}
    payload = {
        "channelId": CHANNEL_ID,
        "chatType": "whatsapp",
        "chatId": chat_id,
        "text": text
    }
    try:
        r = requests.post(WAZZUP_SEND_API, json=payload, headers=headers, timeout=30)
        log(f"Wazzup Send ({chat_id}): {r.status_code}")
        return r.status_code in (200, 201)
    except Exception as e:
        log(f"Wazzup Error: {e}")
        return False

def notify_admin(fio, phone, city, event_type):
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    text = (
        f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* –≤ Bitrix24\n"
        f"‚è∞ –í—Ä–µ–º—è: {now}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {fio} ({phone})\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
        f"üéØ –¶–µ–ª—å: {event_type}\n"
        f"‚úÖ –õ–∏–¥ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ CRM."
    )
    send_message(ADMIN_CHAT_ID, text)

def create_bitrix_lead(city, event_type, fio, phone, chat_id):
    parts = fio.split(' ')
    last, first, second = (parts + ["", "", ""])[:3]
    assigned_id = RESPONSIBLES.get(city, {'id': 1})['id']
    comment = (
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: WhatsApp Bot\n–°–æ–±—ã—Ç–∏–µ: {event_type}\n–ì–æ—Ä–æ–¥: {city}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}\n–ö–æ–Ω—Ç–∞–∫—Ç –≤ WhatsApp: {fio}"
    )
    data = {
        "fields": {
            "TITLE": f"Optimus KZ Bot: {event_type} ({city})",
            "NAME": first, "LAST_NAME": last, "SECOND_NAME": second,
            "ASSIGNED_BY_ID": assigned_id,
            "ADDRESS_CITY": city, "COMMENTS": comment,
            "PHONE": [{"VALUE": phone, "VALUE_TYPE": "WORK"}]
        },
        "params": {"REGISTER_SONET_EVENT": "Y"}
    }
    try:
        r = requests.post(BITRIX_WEBHOOK_URL, json=data, timeout=30)
        log(f"Bitrix lead: {r.status_code} / {r.text}")
        if r.status_code == 200 and r.json().get("result"):
            # –ï—Å–ª–∏ –ª–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            db.session.add(Lead(chat_id=chat_id, fio=fio, phone=phone, city=city, direction=event_type))
            db.session.commit()
            notify_admin(fio, phone, city, event_type)
        else:
            send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ CRM. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –ø–æ–∑–∂–µ.")
    except Exception as e:
        log(f"Bitrix API error: {e}")
        send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å CRM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ú–µ–Ω—é ===
def get_menu_text():
    return "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Optimus KZ*!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:\n" + \
        "\n".join(f"{k}. {v}" for k, v in CITIES.items())

def get_continue_menu():
    return "–°–ø–∞—Å–∏–±–æ! –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å?\n1Ô∏è‚É£ ‚Äî –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã\n2Ô∏è‚É£ ‚Äî –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫"

def get_directions_menu():
    return "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n" + \
        "\n".join(f"{k}. {v}" for k, v in DIRECTIONS.items())

# === –û—Å–Ω–æ–≤–Ω–æ–π Webhook ===
@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    if request.method == 'GET':
        return jsonify({'status': 'ready'}), 200

    data = request.get_json(force=True)
    for msg in data.get("messages", []):
        mid = msg.get("messageId")
        chat_id = msg.get("chatId")
        text = msg.get("text", "").strip()
        fio = msg.get("contact", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        phone = msg.get("contact", {}).get("phone") or chat_id  # –ë–µ—Ä—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ contact, –∏–Ω–∞—á–µ chat_id
        is_me = msg.get("fromMe", False)
        is_echo = msg.get("isEcho", False)

        # –§–∏–ª—å—Ç—Ä—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏, —ç—Ö–æ –∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if is_me or is_echo or not text or mid in processed_message_ids or chat_id != ALLOWED_CHAT_ID:
            processed_message_ids.add(mid)
            continue

        processed_message_ids.add(mid)
        state = user_states.get(chat_id, {"step": "city"})

        if state["step"] == "city":
            if text in CITIES:
                user_states[chat_id] = {"step": "menu", "city": CITIES[text]}
                send_message(chat_id, get_continue_menu())
            else:
                send_message(chat_id, get_menu_text())

        elif state["step"] == "menu":
            city = state["city"]
            if text == "1":
                user_states[chat_id]["step"] = "direction"
                send_message(chat_id, get_directions_menu())
            elif text == "2":
                send_message(chat_id, "üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
                create_bitrix_lead(city, "Callback", fio, phone, chat_id)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_continue_menu())

        elif state["step"] == "direction":
            city = state["city"]
            if text in DIRECTIONS:
                direction = DIRECTIONS[text]
                send_message(chat_id,
                    f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{direction}* –≤ –≥–æ—Ä–æ–¥–µ *{city}*. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
                create_bitrix_lead(city, direction, fio, phone, chat_id)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_directions_menu())

        else:
            user_states.pop(chat_id, None)
            send_message(chat_id, get_menu_text())

    return jsonify({'status': 'ok'}), 200

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ===
@app.route('/ping-db')
def ping_db():
    try:
        count = Lead.query.count()
        return jsonify({"ok": True, "leads_count": count})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)})

# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º webhook‚Ä¶")
    app.run(host='0.0.0.0', port=10000)
