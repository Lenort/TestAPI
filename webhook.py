from flask import Flask, request, jsonify
import datetime
import requests
import os
import psycopg2

app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Supabase) ===
DB_URL = os.getenv("DATABASE_URL")
if not DB_URL:
    raise RuntimeError("DATABASE_URL is not set")
conn = psycopg2.connect(DB_URL)
conn.autocommit = True
cursor = conn.cursor()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wazzup ===
API_BEARER_TOKEN = '92a8247c0ce7472a86a5c36f71327d19'
CHANNEL_ID        = 'c1808feb-0822-4203-a6dc-e2a07c705751'
ALLOWED_CHAT_ID   = '77766961328'
ADMIN_CHAT_ID     = '77766961328'
WAZZUP_SEND_API   = 'https://api.wazzup24.com/v3/message'

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24 ===
BITRIX_WEBHOOK_URL = 'https://b24-xq7bnn.bitrix24.kz/rest/1/tnjaxnh7k6xwbyyq/crm.lead.add.json'

# === –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ===
CITIES = {
    '1': '–ê–ª–º–∞—Ç—ã','2': '–ù—É—Ä-–°—É–ª—Ç–∞–Ω','3': '–®—ã–º–∫–µ–Ω—Ç',
    '4': '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞','5': '–ê–∫—Ç–æ–±–µ','6': '–ê—Å—Ç–∞–Ω–∞'
}
DIRECTIONS = {
    '1': '–ö–∏—Ä–ø–∏—á –∏ –±–ª–æ–∫–∏','2': '–¶–µ–º–µ–Ω—Ç –∏ —Ä–∞—Å—Ç–≤–æ—Ä—ã','3': '–ê—Ä–º–∞—Ç—É—Ä–∞ –∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç',
    '4': '–î—Ä–µ–≤–µ—Å–∏–Ω–∞ –∏ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã','5': '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã','6': '–ò–∑–æ–ª—è—Ü–∏—è –∏ —É—Ç–µ–ø–ª–∏—Ç–µ–ª–∏',
    '7': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ','8': '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ','9': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    '10': '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
}
RESPONSIBLES = {
    '–ê–ª–º–∞—Ç—ã': {'id':2},'–ù—É—Ä-–°—É–ª—Ç–∞–Ω': {'id':3},'–®—ã–º–∫–µ–Ω—Ç': {'id':4},
    '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞': {'id':11},'–ê–∫—Ç–æ–±–µ': {'id':5},'–ê—Å—Ç–∞–Ω–∞': {'id':1}
}

user_states = {}
processed_message_ids = set()

def log(msg):
    ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"{ts} - {msg}")

def save_user_to_db(chat_id, fio):
    last_interaction = datetime.datetime.utcnow()
    try:
        cursor.execute("""
            INSERT INTO users (chat_id, fio, last_interaction)
            VALUES (%s, %s, %s)
            ON CONFLICT (chat_id) DO UPDATE SET
                fio = EXCLUDED.fio,
                last_interaction = EXCLUDED.last_interaction
        """, (chat_id, fio, last_interaction))
        log(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω: {fio} / {chat_id}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def send_message(chat_id: str, text: str) -> bool:
    headers = {
        'Authorization': f'Bearer {API_BEARER_TOKEN}',
        'Content-Type':  'application/json'
    }
    payload = {
        "channelId": CHANNEL_ID,
        "chatType":  "whatsapp",
        "chatId":    chat_id,
        "text":      text
    }
    try:
        r = requests.post(WAZZUP_SEND_API, json=payload, headers=headers, timeout=30)
        log(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Wazzup ({chat_id}): {r.status_code}")
        return r.status_code in (200, 201)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Wazzup ({chat_id}): {e}")
        return False

def notify_admin(fio, phone, city, event_type):
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    text = (
        "üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n"
        f"‚è∞ *{now}*\n"
        f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {fio} ({phone})\n"
        f"üìç *–ì–æ—Ä–æ–¥:* {city}\n"
        f"üéØ *–°–æ–±—ã—Ç–∏–µ:* {event_type}\n"
        "\n‚úÖ –õ–∏–¥ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    send_message(ADMIN_CHAT_ID, text)

def create_bitrix_lead(city, event_type, fio, phone, chat_id):
    parts = fio.split(' ')
    last, first, second = (parts + ["", "", ""])[:3]
    assigned = RESPONSIBLES.get(city, {'id':1})['id']
    comment = (
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: WhatsApp Bot\n"
        f"–°–æ–±—ã—Ç–∏–µ: {event_type}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {fio}"
    )
    data = {"fields":{
        "TITLE": f"Optimus KZ: {event_type} ({city})",
        "NAME": first, "LAST_NAME": last, "SECOND_NAME": second,
        "ASSIGNED_BY_ID": assigned, "ADDRESS_CITY": city,
        "COMMENTS": comment,
        "PHONE":[{"VALUE": phone,"VALUE_TYPE":"WORK"}]
    },"params":{"REGISTER_SONET_EVENT":"Y"}}
    try:
        r = requests.post(BITRIX_WEBHOOK_URL, json=data, timeout=30)
        log(f"Bitrix24 –æ—Ç–≤–µ—Ç: {r.status_code}")
        if r.status_code == 200 and r.json().get("result"):
            notify_admin(fio, phone, city, event_type)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ Bitrix24 API: {e}")

def get_menu_text():
    return (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Optimus KZ!*\n"
        "üìç –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?
        –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º –∞–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –∏ —Å–≤—è–∑–∞—Ç—å —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.:\n"
        + "\n".join(f"*{k}.* {v}" for k, v in CITIES.items())
    )

def get_continue_menu():
    return (
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n"
        "*1Ô∏è‚É£ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã*\n"
        "*2Ô∏è‚É£ –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫*"
    )

def get_directions_menu():
    return (
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
        + "\n".join(f"*{k}.* {v}" for k, v in DIRECTIONS.items())
    )

@app.route('/webhook', methods=['POST','GET'])
def webhook():
    if request.method == 'GET':
        return jsonify({'status':'ready'}), 200

    data = request.get_json(force=True)
    log(f"–ü–æ–ª—É—á–µ–Ω–æ webhook: {data}")

    for msg in data.get("messages", []):
        mid     = msg.get("messageId")
        chat_id = msg.get("chatId")
        text    = msg.get("text","").strip()
        fio     = msg.get("contact",{}).get("name","–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        is_me   = msg.get("fromMe",False)
        is_echo = msg.get("isEcho",False)

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if is_me or is_echo or not text or mid in processed_message_ids:
            processed_message_ids.add(mid)
            continue
        processed_message_ids.add(mid)

        # –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
        if chat_id != ALLOWED_CHAT_ID and chat_id not in user_states:
            continue

        state = user_states.get(chat_id, {"step": "city"})

        # –®–∞–≥ 1: –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
        if state["step"] == "city":
            if text in CITIES:
                user_states[chat_id] = {"step": "menu", "city": CITIES[text]}
                send_message(chat_id, get_continue_menu())
            else:
                send_message(chat_id, get_menu_text())

        # –®–∞–≥ 2: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        elif state["step"] == "menu":
            city = state["city"]
            if text == "1":
                user_states[chat_id]["step"] = "direction"
                send_message(chat_id, get_directions_menu())
            elif text == "2":
                send_message(chat_id, "üìû *–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!*")
                create_bitrix_lead(city, "Callback", fio, chat_id)
                save_user_to_db(chat_id, fio)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_continue_menu())

        # –®–∞–≥ 3: –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        elif state["step"] == "direction":
            city = state["city"]
            if text in DIRECTIONS:
                direction = DIRECTIONS[text]
                send_message(chat_id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ *{direction}* –≤ *{city}*.\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
                create_bitrix_lead(city, f"{direction}", fio, chat_id)
                save_user_to_db(chat_id, fio)
                user_states.pop(chat_id, None)
            else:
                send_message(chat_id, get_directions_menu())

        else:
            user_states.pop(chat_id, None)
            send_message(chat_id, get_menu_text())

    return jsonify({'status':'ok'}), 200

if __name__ == '__main__':
    log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å webhook-—Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run(host='0.0.0.0', port=10000)
